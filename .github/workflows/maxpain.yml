name: Update Max Pain Data

on:
  schedule:
    - cron: "0 */6 * * *"      # alle 6 Stunden
  workflow_dispatch:           # manuell auslösbar

# Schreib-Rechte für Push
permissions:
  contents: write

jobs:
  update-max-pain:
    runs-on: ubuntu-latest

    steps:
      # --- Repo klonen (ganze Historie, damit git pull funktioniert) ---
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0            # wichtig für rebase

      # --- Python-Umgebung ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"    # oder 3.9/3.10 – wie du magst

      - name: Install dependencies
        run: pip install yfinance

      # --- Max-Pain berechnen ---
      - name: Run Max Pain calculation
        run: python maxpain.py      # schreibt maxpain.json

      # --- Änderungen committen & sauber pushen ---
      - name: Commit & push if changed
        run: |
          git config --global user.name  "GitHub Action"
          git config --global user.email "action@users.noreply.github.com"

          git add maxpain.json            # <— Dateiname an HTML/Skript anpassen
          # nichts zu committen? → sofort raus
          git diff --cached --quiet && { echo "No changes"; exit 0; }

          git commit -m "chore: update max pain data"

          # holt eventuelle neue Commits & setzt unseren obendrauf
          git pull --rebase --autostash origin "${GITHUB_REF_NAME}"
          git push origin HEAD:"${GITHUB_REF_NAME}"
